///Handles ALL movement and collisions!

//Handle player input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_down = keyboard_check(vk_down);
key_jump = keyboard_check_pressed(vk_space);
key_A = keyboard_check(ord("A"));
key_S = keyboard_check(ord("S"));
image_speed = 0.2;

//Check if you lost a life via hp loss or falling off
if((hp < 1 || offScreened == true) && dead == false){
    GUI.canPause = false;
    GUI.livesRemaining -=1;
    image_alpha = 1;
    instance_deactivate_all(true);
    audio_pause_music();
    audio_play_sound(sd_playerDefeat,5,false);
    dead = true;
    alarm[2] = 50;
}

if(dead == false){
    //Hit stun
    if(inviniFrames == false || (hitStun <= 1 && inviniFrames == true) ){
        move = key_left + key_right;
    }
    else{
        move = 0;
        key_jump = 0;
    }
    
    //Walking animation
    if(isMale == true){
        if(move == 1){
            sprite_index = spr_maleWalk;
            image_xscale = 1;
        }
        else if(move == -1){
            sprite_index = spr_maleWalk;
            image_xscale = -1;
        }
    }
    else{
        if(move == 1){
            sprite_index = spr_femaleWalk;
            image_xscale = 1;
        }
        else if(move == -1){
            sprite_index = spr_femaleWalk;
            image_xscale = -1;
        }
    }
    
    //Basic movement
    hsp = move * moveSpeed;
    if(hsp > 0){
        direc = 1;
    }
    else if(hsp < 0){
        direc = -1;
    }
    
    if(vsp < 10){   
        vsp += grav;    
    }
    if(place_meeting(x,y+1,SuperClass_FloorWall)){
        if(key_jump == 1){
            vsp = -jumpSpeed;
            grounded = false;
            GUI.canPause = false;
            audio_play_sound(sd_jump,1,false);
        }
    }
    
    //Jump animation
    if(isMale == true){
        if(grounded == false && direc == 1){
            sprite_index = spr_maleJump;
            image_xscale = 1;
        }
        else if(grounded == false && direc == -1){
            sprite_index = spr_maleJump;
            image_xscale = -1;
        }
    }
    else{
        if(grounded == false && direc == 1){
            sprite_index = spr_femaleJump;
            image_xscale = 1;
        }
        else if(grounded ==false && direc == -1){
            sprite_index = spr_femaleJump;
            image_xscale = -1;
        }
    }
        
    //This temporary variable helps solve moving platform problems
    var hsp_final = hsp + hsp_carry;
    hsp_carry = 0;
    
    //Special Gender Actions
    if(sCoolDownMode == false){
        if(isMale == true){ //Male actions
             //Dash Action
            if(key_A == 1 && move != 0){
                hsp_final = move * mDashSpeed;
                sprite_index = spr_maleRun;
                if(move == -1){  image_xscale = -1; }
                sActionPerform = true;
            }
            //Shoulder Attack
            else if(key_S == 1 && move != 0){
                sprite_index = spr_maleCharge;
                if(move == -1){ image_xscale = -1;  }
                sAttackState = true;
                sActionPerform = true;
            }
        }
        else{   
            //female actions
            //Twirl Action
            if(key_A == 1 && move != 0){
                sprite_index = spr_femaleTwirl;
                if(move == -1){  image_xscale = -1; }
                sActionPerform = true;
                sAttackState = true;
                //if in midair, adds in a weak midair jump!
                if(grounded == false && vsp != 0){
                    vsp = -0.5;
                }
            }
            //Hadoken Attack
            else if(fOneProjectile == false && key_S == 1 && move != 0){
                sprite_index = spr_femaleShoot;
                if(move == -1){ image_xscale = -1;  }
                if(move == 1){
                    with instance_create(x,y, obj_energyBall){
                        direction = 0;
                        speed = 7;
                    }
                }
                else if(move == -1){
                    with instance_create(x,y, obj_energyBall){
                        direction = 180;
                        speed = 7;
                    }
                }
                fOneProjectile = true;
                sActionPerform = true;
            }
        }
    }
    
    //Knockback from getting hit
    if(inviniFrames == true && hitStun > 0){
        hitStun -= 1;
        hsp_final = (sign(direc) * -10) + hsp_final;
    }
    
    //Horizontal Collision Handeling and Slope Collision
    if(place_meeting(x+hsp_final,y,SuperClass_FloorWall)){
        yAdd = 0;
        while(grounded == true && place_meeting(x+hsp_final,y-yAdd,SuperClass_FloorWall) && yAdd <= abs(1*hsp_final)){
            yAdd += 1;
        }
        if(place_meeting(x+hsp_final,y-yAdd,SuperClass_FloorWall)){
            while(!place_meeting(x+sign(hsp_final),y,SuperClass_FloorWall)){
                x += sign(hsp_final);
            }
            hsp_final = 0;
            hsp = 0;   
        }
        else{
            y -= yAdd;
        }
        
    }
    x += hsp_final;
    
    //Vertical Collision Handeling
    if(place_meeting(x,y+vsp,SuperClass_FloorWall)){
        while(!place_meeting(x,y+sign(vsp),SuperClass_FloorWall)){
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;
    
    //Checks if you are on the ground
    if(place_meeting(x,y+1,SuperClass_FloorWall)){
        grounded = true;
        GUI.canPause = true;
    }
    else{
        grounded = false;
    }
        
    //Special Move CoolDown
    if(sActionPerform == true && sCoolDownMode = false){
        sMoveDuration -= 1;
        if(sMoveDuration < 0){
            sAttackState = false;
            sCoolDownMode = true;
        }
    }
    if(sCoolDownMode == true){
        sCoolDuration -= 1;
        if(sCoolDuration < 0){
            sCoolDownMode = false;
            sActionPerform = false;
            fOneProjectile = false;
            sCoolDuration = 75;
            sMoveDuration = 20;
            audio_play_sound(sd_coolDownSMoveDone,3,false);
        }
    }
}
else{
    if(isMale == true){
        sprite_index = spr_deadMale;
        
    }
    else{
        sprite_index = spr_deadFemale;
    }
    if(dyingAnimate == true){
        image_angle += 10;
        deadTicker -= 1;
        if(deadTicker > 130){
            y = y-14;
            effect_create_below(ef_star,x,y+10,1,c_yellow);
        }
        else{
            y = y+14;
            effect_create_above(ef_star,x,y-10,1,c_yellow);
        }
    }
}

