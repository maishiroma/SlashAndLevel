<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables to declare
//width = 240;
//height = 120;
width = 160;
height = 160;
padding = 8;

//Keep track of the starting line
start = ds_list_create();
ds_list_add(start,0);

//Keep track of the last space and current position
count = 0;
lastSpace = 0;
line = 0;

//Set the message
message = "Welcome! Survive as long as you can! Collect items and beat up baddies! Press the space bar near items to get them! Hit enter to view your inventory and status screen!";
str = "";
global.messageOutput = "";         //TEMP SOLUTION. Where the entire battle message will be outputted. Only used in battle mode.

//Go to https://www.youtube.com/watch?v=b1hT-nzIds4 for help
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroys the text box once the alarm is called.
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy ds list to ensure security
ds_list_destroy(start);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws out the box and string
draw_set_alpha(0.5);
draw_roundrect_color(x,y,x+width,y+width,c_black,c_black,false);
draw_set_alpha(1);

//Set the text color white
draw_set_color(c_white);

//Check if the string passed the width of the box (This has to be checked before checking if the string passed
//the bottom)
if(string_width(str) &gt; width - padding - padding){
    //Remove the space and replace it with a line break.
    message = string_delete(message,lastSpace,1); 
    message = string_insert("#",message,lastSpace);
    ds_list_add(start,lastSpace+1);
}

//Make sure we have not reached the end of the message. 
if(count &lt; string_length(message)){
    //Are we at a space? Set the last space variable 
    if(string_char_at(message,count) == " "){
        lastSpace = count;
    }
    //Increment the count
    count+=1;
}

//Did we go past the bottom? Move upa line
if(string_height(str) &gt; height-padding){
    line+=1;
}

//Grab the string that we want to show
str = string_copy(message,ds_list_find_value(start, line),count - ds_list_find_value(start,line));

//Draw the actual string 
draw_text(x+padding,y+padding,str);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>160,75</point>
    <point>160,160</point>
  </PhysicsShapePoints>
</object>
